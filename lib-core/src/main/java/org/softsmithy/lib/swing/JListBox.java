/*
 * JListManager.java
 *
 * Created on 6. August 2004, 14:34
 */

package org.softsmithy.lib.swing;

import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.event.*;
import org.softsmithy.lib.swing.action.*;
/**
 * JListBox provides a scrollable list with two buttons to change the order of
 * the elements.
 * @author  puce
 */
public class JListBox extends JPanel {
  
  private XAction upAction = new DefaultXAction();
  private XAction downAction = new DefaultXAction();
  private final JList list;
  private final DefaultListModel listModel = new DefaultListModel();
  private final ListSelectionListener lsl = new ListEndSelectionListener();
  
  /** Creates a new instance of this class. */
  public JListBox() {
    this(Collections.EMPTY_LIST);
  }
  
  /**
   * Creates a new instance of this class.
   * @param collection 
   */
  public JListBox(Collection collection){
    for (Iterator i=collection.iterator(); i.hasNext();){
      listModel.addElement(i.next());
    }
    this.list = new JList(listModel);
    list.addListSelectionListener(lsl);
    initComponents();
    try{
      upAction = NavigationActionFactory.UP.createXAction(this, getLocale());
      downAction = NavigationActionFactory.DOWN.createXAction(this, getLocale());
    } catch (NoSuchMethodException ex){ // should not happen here
      ex.printStackTrace();
    }
    XActions.configureButton(upButton, upAction, IconType.SMALL_ICON, false, false);
    XActions.configureButton(downButton, downAction, IconType.SMALL_ICON, false, false);
    upAction.setEnabled(false);
    downAction.setEnabled(false);
    scrollPane.setViewportView(list);
  }
  
  /**
   * This method gets called, when the "up"-button gets pressed.
   * @param e the action event fired by the "up"-button.
   */
  public void navigationUp(ActionEvent e){
    if (upAction.isEnabled()){ // to avoid programmatic misuse
      int[] oldIndices = list.getSelectedIndices();
      int[] newIndices = new int[oldIndices.length];
      for (int i=0; i<oldIndices.length; i++){        
        Object obj = listModel.remove(oldIndices[i]);
        newIndices[i] = oldIndices[i] - 1;
        listModel.add(newIndices[i], obj);
      }
      list.setSelectedIndices(newIndices);
      list.ensureIndexIsVisible(newIndices[0] > 0 ? newIndices[0] - 1 : newIndices[0]);
    }
  }
  
  /**
   * This method gets called, when the "down"-button gets pressed.
   * @param e the action event fired by the "down"-button.
   */
  public void navigationDown(ActionEvent e){
    if (downAction.isEnabled()){ // to avoid programmatic misuse
      int[] oldIndices = list.getSelectedIndices();
      int[] newIndices = new int[oldIndices.length];
      for (int i=oldIndices.length-1; i>=0; i--){
        newIndices[i] = oldIndices[i] + 1;
        Object obj = listModel.remove(oldIndices[i]);
        listModel.add(newIndices[i], obj);
      }
      list.setSelectedIndices(newIndices);
      int lastNewIndex = newIndices[newIndices.length - 1];
      list.ensureIndexIsVisible(lastNewIndex < listModel.getSize() - 1 ? lastNewIndex + 1 : lastNewIndex);
    }
  }
  
  /**
   * Gets the list model of this component.
   * @return the list model of this component
   */
  public ListModel getListModel(){
    return list.getModel();
  }
  
  /**
   * Gets the list selection model of this component.
   * @return the list selection model of this component.
   */
  public ListSelectionModel getListSelectionModel(){
    return list.getSelectionModel();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
    java.awt.GridBagConstraints gridBagConstraints;

    scrollPane = new javax.swing.JScrollPane();
    jPanel1 = new javax.swing.JPanel();
    upButton = new javax.swing.JButton();
    downButton = new javax.swing.JButton();

    setLayout(new java.awt.BorderLayout());

    scrollPane.setOpaque(false);
    add(scrollPane, java.awt.BorderLayout.CENTER);

    jPanel1.setLayout(new java.awt.GridBagLayout());

    jPanel1.setOpaque(false);
    upButton.setMargin(new java.awt.Insets(3, 3, 3, 3));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 10);
    jPanel1.add(upButton, gridBagConstraints);

    downButton.setMargin(new java.awt.Insets(3, 3, 3, 3));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 10);
    jPanel1.add(downButton, gridBagConstraints);

    add(jPanel1, java.awt.BorderLayout.EAST);

  }//GEN-END:initComponents
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton downButton;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane scrollPane;
  private javax.swing.JButton upButton;
  // End of variables declaration//GEN-END:variables
  
  
  private class ListEndSelectionListener implements ListSelectionListener{
    
    public void valueChanged(ListSelectionEvent e) {
      if (! e.getValueIsAdjusting()){
        JList list = (JList)e.getSource();
        upAction.setEnabled(selectedButNotFirst(list));
        downAction.setEnabled(selectedButNotLast(list));
      }
      
    }
    
    private boolean selectedButNotFirst(JList list){
      return list.getMinSelectionIndex() > 0; // not -1 and not 0
    }
    
    private boolean selectedButNotLast(JList list){
      return (! list.isSelectionEmpty()) && list.getMaxSelectionIndex() < listModel.getSize() - 1;
      
    }
    
    
  }
}
