/*
 * JCustomizerPane.java
 *
 * Created on 21. August 2002, 16:20
 */

package puce.swing;

import java.awt.*;
import javax.swing.*;

/**
 *
 * @author  puce
 */
public class JCustomizerPane extends JPanel {
  
  
  /** Holds value of property showingConstraints. */
  private boolean showingConstraints = true;
  
  
  /** Creates new form JCustomizerPane */
  public JCustomizerPane() {
    initComponents();
    setLayout(new InfiniteTableLayout());
    setSize(400, 300);
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents

    setLayout(null);

    setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 255)));
  }//GEN-END:initComponents
  
  
  
  /** Getter for property showingConstraints.
   * @return Value of property showingConstraints.
   */
  public boolean isShowingConstraints() {
    return this.showingConstraints;
  }
  
  /** Setter for property showingConstraints.
   * @param showingConstraints New value of property showingConstraints.
   */
  public void setShowingConstraints(boolean showingConstraints) {
    this.showingConstraints = showingConstraints;
  }
  
  /** Calls the UI delegate's paint method, if the UI delegate
   * is non-<code>null</code>.  We pass the delegate a copy of the
   * <code>Graphics</code> object to protect the rest of the
   * paint code from irrevocable changes
   * (for example, <code>Graphics.translate</code>).
   * <p>
   * If you override this in a subclass you should not make permanent
   * changes to the passed in <code>Graphics</code>. For example, you
   * should not alter the clip <code>Rectangle</code> or modify the
   * transform. If you need to do these operations you may find it
   * easier to create a new <code>Graphics</code> from the passed in
   * <code>Graphics</code> and manipulate it. Further, if you do not
   * invoker super's implementation you must honor the opaque property,
   * that is
   * if this component is opaque, you must completely fill in the background
   * in a non-opaque color. If you do not honor the opaque property you
   * will likely see visual artifacts.
   *
   * @param g the <code>Graphics</code> object to protect
   * @see #paint
   * @see ComponentUI
   */
  protected void paintComponent(Graphics g) {
    super.paintComponent(g);
    if (isShowingConstraints()){
      ((TableLayout) getLayout()).drawGrid(this, g);
    }
    /* First painting occurs at (x,y), where x is at least
      insets.left, and y is at least insets.height. */
  }
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  
}
