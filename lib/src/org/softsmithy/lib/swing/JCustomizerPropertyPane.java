/*
 * PropertyPane.java
 *
 * Created on 19. September 2002, 17:57
 */

package org.softsmithy.lib.swing;

import org.softsmithy.lib.swing.customizer.CustomizerPropertyTable;
import org.softsmithy.lib.swing.customizer.CustomizerPropertyTableModel;
import java.awt.BorderLayout;
import java.beans.*;
import java.util.*;
import javax.swing.*;
import org.softsmithy.lib.lang.reflect.*;
import org.softsmithy.lib.swing.event.*;


/**
 *
 * @author  puce
 */
public class JCustomizerPropertyPane extends JPanel implements CustomizerSelectionListener{
  
  private CustomizerPropertyTable table;
  /** Creates new form PropertyPane */
  public JCustomizerPropertyPane() {
    initComponents();
    table = new CustomizerPropertyTable();
    add(BorderLayout.CENTER, new JScrollPane(table));
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents

    setLayout(new java.awt.BorderLayout());

  }//GEN-END:initComponents
  
  public void selectionChanged(CustomizerSelectionEvent e) {
    Set properties = Collections.EMPTY_SET;//PageElement.getCustomizableProperties();//customizer.getProperties();
    Class topMostCommonClass = null;
    // List descriptors = new ArrayList();
    Iterator i = e.getSelectedCustomizers().iterator();
    if (i.hasNext()){
      JCustomizer customizer = (JCustomizer) i.next();
      properties = new LinkedHashSet(customizer.getCustomizableProperties());
      topMostCommonClass = customizer.getClass();
      for (;i.hasNext();){
        JCustomizer custom = (JCustomizer) i.next();
        properties.retainAll(custom.getCustomizableProperties());
        topMostCommonClass = Classes.getTopMostCommonClass(topMostCommonClass, custom.getClass());
      }
      //      for (Iterator j=properties.iterator(); j.hasNext();){
      //        String property = (String) j.next();
      //        try{
      //          PropertyDescriptor descriptor = new PropertyDescriptor("component"
      //          +property.substring(0, 1).toUpperCase()
      //          +property.substring(1),
      //          aClass);
      //          descriptors.add(descriptor);
      //        } catch(IntrospectionException ex1){
      //          try{
      //            PropertyDescriptor descriptor = new PropertyDescriptor(property, aClass);
      //            descriptors.add(descriptor);
      //          } catch(IntrospectionException ex2){
      //            ex2.printStackTrace();
      //          }
      //        }
      //      }
    }
    //customizer.setLocale(Locale.GERMAN);
    ((CustomizerPropertyTableModel) table.getModel()).stopCustomizerListening();
    table.setModel(new CustomizerPropertyTableModel(new ArrayList(properties), new ArrayList(e.getSelectedCustomizers()), topMostCommonClass, getLocale()));
    //      for (int j=0; j<descriptors.length; j++){
    //        System.out.println(descriptors[j].getName() + ": " +descriptors[j].getDisplayName());
    //      }
    
  }
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  
}
