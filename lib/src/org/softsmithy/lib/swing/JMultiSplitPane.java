/*
 *                  Sun Public License Notice
 *
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"); you may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 *
 * The Original Code is SoftSmithy Utility Library. The Initial Developer of the
 * Original Code is Florian Brunner (Sourceforge.net user: puce). All Rights Reserved.
 *
 * Contributor(s): .
 */

/*
 * JMultiSplitPane.java
 *
 * Created on 11. Oktober 2002, 17:03
 */

package org.softsmithy.lib.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.util.*;
import javax.swing.*;
import org.softsmithy.lib.swing.multisplit.*;


/**
 *
 * @author  puce
 */
public class JMultiSplitPane extends JPanel {
  
  
  
  private List splitPanes = new ArrayList();
  
  /** Holds value of property orientation. */
  private SplitOrientation splitOrientation;
  
  public JMultiSplitPane() {
    this(2);
  }
  
  /** Creates new form JMultiSplitPane */
  public JMultiSplitPane(int initNumber) {
    this(initNumber, SplitOrientation.HORIZONTAL);
  }
  
  /** Creates new form JMultiSplitPane */
  public JMultiSplitPane(SplitOrientation splitOrientation) {
    this(2, splitOrientation);
  }
  
  /** Creates new form JMultiSplitPane */
  public JMultiSplitPane(int initNumber, SplitOrientation splitOrientation) {
    initComponents();
    // at least 2 panes (= 1 SplitPane)
    JSplitPane splitPane = new JSplitPane();
    splitPane.setResizeWeight(0.0);
    //splitPane.setDividerLocation(0.5);
    this.add(BorderLayout.CENTER, splitPane);
    splitPanes.add(splitPane);
    setSplitOrientation(splitOrientation);
    for (int i=2; i<initNumber; i++){
      splitLastPane();
    }
  }
  
  public void splitLastPane(){
    splitPane(splitPanes.size(), false);
  }
  
  public void splitPane(int index, boolean shiftComponent){
    JSplitPane pane = new JSplitPane(getSplitOrientation().getSplitPaneConstant());
    pane.setResizeWeight(1);
    //pane.setDividerLocation(0.5);
    //    pane.setBorder(null);
    JSplitPane splitPane;
    if (index == splitPanes.size()){
      splitPane = (JSplitPane) splitPanes.get(index-1);
      Component comp = splitPane.getRightComponent();
      if (shiftComponent){
        pane.setRightComponent(comp);
      } else {
        pane.setLeftComponent(comp);
      }
      splitPanes.add(index, pane);
    } else {
      splitPane = (JSplitPane) splitPanes.get(index);
      Component comp = splitPane.getRightComponent();
      pane.setRightComponent(comp);
      if (shiftComponent){
        pane.setLeftComponent(splitPane.getLeftComponent());
        splitPane.setLeftComponent(null);
      }
      splitPanes.add(index+1, pane);
    }
    splitPane.setRightComponent(pane);
  }
  
  public void setComponent(int index, Component component){
    if (index < splitPanes.size()){
      ((JSplitPane) splitPanes.get(index)).setLeftComponent(component);
    } else {
      ((JSplitPane) splitPanes.get(index-1)).setRightComponent(component);
    }
    //repaint();
  }
  
  public Component getPane(int index){
    Component component;
    if (index < splitPanes.size()){
      component = ((JSplitPane) splitPanes.get(index)).getLeftComponent();
    } else {
      component = ((JSplitPane) splitPanes.get(index-1)).getRightComponent();
    }
    return component;
  }
  
  public int getPanesCount(){
    return splitPanes.size() + 1;
  }
  
  public int getDividerLocation(int index){
    return ((JSplitPane) splitPanes.get(index)).getDividerLocation();
  }
  
  public void setDividerLocation(int index, int location){
    ((JSplitPane) splitPanes.get(index)).setDividerLocation(location);
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
    
    setLayout(new java.awt.BorderLayout());
    
  }//GEN-END:initComponents
  
  /** Getter for property orientation.
   * @return Value of property orientation.
   *
   */
  public SplitOrientation getSplitOrientation() {
    return this.splitOrientation;
  }
  
  /** Setter for property orientation.
   * @param orientation New value of property orientation.
   *
   */
  public void setSplitOrientation(SplitOrientation splitOrientation) {
    this.splitOrientation = splitOrientation;
    for (int i=0; i<splitPanes.size(); i++){
      ((JSplitPane) splitPanes.get(i)).setOrientation(splitOrientation.getSplitPaneConstant());
    }
  }
  
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  
}
