/*
 *         COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Notice
 *
 * The contents of this file are subject to the COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL)
 * Version 1.0 (the "License"); you may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.opensource.org/licenses/cddl1.txt
 *
 * The Original Code is SoftSmithy Utility Library. The Initial Developer of the
 * Original Code is Florian Brunner (Sourceforge.net user: puce). All Rights Reserved.
 *
 * Contributor(s): .
 */

/*
 * JFontChooser.java
 *
 * Created on 30. September 2002, 15:58
 */
package org.softsmithy.lib.swing;

import java.awt.Component;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.softsmithy.lib.swing.action.*;
import org.softsmithy.lib.swing.chooser.*;
import org.softsmithy.lib.util.*;

/**
 * http://java.sun.com/docs/books/tutorial/2d/textandfonts/example-1dot2/FontSelection.java
 * @author  puce
 */
public class JFontChooser extends JPanel {

    private static final Logger LOG = LoggerFactory.getLogger(JFontChooser.class);
    private ResourceBundle rb = ResourceBundle.getBundle("org.softsmithy.lib.swing.JFontChooser", getLocale());
    private FontChooserDialog chooserDialog = null;

    public JFontChooser() {
        this(null);
    }

    /** Creates new form JFontChooser */
    public JFontChooser(Font selectedFont) {
        initComponents();
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String envfonts[] = ge.getAvailableFontFamilyNames(getLocale());
        Vector<String> fontNames = new Vector<>();
        for (int i = 1; i < envfonts.length; i++) { // TODO: i=1???
            fontNames.addElement(envfonts[i]);
        }
        fontsBox.setModel(new DefaultComboBoxModel(fontNames));
        Vector<Integer> sizes = new Vector<>();
        for (int i = 6; i <= 16; i++) {
            sizes.add(i);
        }
        for (int i = 18; i <= 28; i += 2) {
            sizes.add(i);
        }
        for (int i = 32; i <= 96; i += 4) {
            sizes.add(i);
        }
        sizesBox.setModel(new DefaultComboBoxModel(sizes));
        sizesBox.setRenderer(new NumberListCellRenderer());
        //sizesBox.setSelectedItem(new Integer(12));
        //sizesBox.setEditable(true);
//    Vector styles = new Vector();
//    for (Iterator i=FontStyle.VALUES.iterator(); i.hasNext();){
//      styles.add(new TypesafeEnumItem((FontStyle)i.next(), getLocale()));
//    }
        stylesBox.setModel(new TypesafeEnumComboBoxModel(FontStyle.class, getLocale()));
        selectFont(selectedFont);
    }

    public void selectFont(Font font) {
        if (font == null) {
            font = getFont();
        }
        setSelectedFont(font);
        fontsBox.setSelectedItem(font.getFamily(getLocale()));
        sizesBox.setSelectedItem(font.getSize());
        stylesBox.setSelectedItem(FontStyle.getFontStyle(font.getStyle()));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
  private void initComponents() {//GEN-BEGIN:initComponents

    java.awt.GridBagConstraints gridBagConstraints;



    fontsLabel = new javax.swing.JLabel();

    sizesLabel = new javax.swing.JLabel();

    stylesLabel = new javax.swing.JLabel();

    fontsBox = new javax.swing.JComboBox();

    sizesBox = new javax.swing.JComboBox();

    previewPane = new javax.swing.JPanel();

    previewLabel = new javax.swing.JLabel();

    stylesBox = new org.softsmithy.lib.swing.JTypesafeEnumComboBox();



    setLayout(new java.awt.GridBagLayout());



    fontsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

    fontsLabel.setLabelFor(fontsBox);

    fontsLabel.setText(rb.getString("fonts"));

    gridBagConstraints = new java.awt.GridBagConstraints();

    gridBagConstraints.gridx = 0;

    gridBagConstraints.gridy = 0;

    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;

    gridBagConstraints.weightx = 1.0;

    add(fontsLabel, gridBagConstraints);



    sizesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

    sizesLabel.setLabelFor(sizesBox);

    sizesLabel.setText(rb.getString("sizes"));

    gridBagConstraints = new java.awt.GridBagConstraints();

    gridBagConstraints.gridx = 1;

    gridBagConstraints.gridy = 0;

    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;

    add(sizesLabel, gridBagConstraints);



    stylesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

    stylesLabel.setLabelFor(stylesBox);

    stylesLabel.setText(rb.getString("styles"));

    gridBagConstraints = new java.awt.GridBagConstraints();

    gridBagConstraints.gridx = 2;

    gridBagConstraints.gridy = 0;

    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;

    add(stylesLabel, gridBagConstraints);



    fontsBox.setMaximumRowCount(9);

    fontsBox.addItemListener(new java.awt.event.ItemListener() {

      public void itemStateChanged(java.awt.event.ItemEvent evt) {

        fontsBoxItemStateChanged(evt);

      }

    });



    gridBagConstraints = new java.awt.GridBagConstraints();

    gridBagConstraints.gridx = 0;

    gridBagConstraints.gridy = 1;

    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;

    add(fontsBox, gridBagConstraints);



    sizesBox.setMaximumRowCount(9);

    sizesBox.addItemListener(new java.awt.event.ItemListener() {

      public void itemStateChanged(java.awt.event.ItemEvent evt) {

        sizesBoxItemStateChanged(evt);

      }

    });



    gridBagConstraints = new java.awt.GridBagConstraints();

    gridBagConstraints.gridx = 1;

    gridBagConstraints.gridy = 1;

    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;

    add(sizesBox, gridBagConstraints);



    previewPane.setLayout(new java.awt.BorderLayout());



    previewPane.setBorder(new javax.swing.border.TitledBorder(rb.getString("preview")));

    previewLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

    previewLabel.setText(rb.getString("previewText"));

    previewPane.add(previewLabel, java.awt.BorderLayout.CENTER);



    gridBagConstraints = new java.awt.GridBagConstraints();

    gridBagConstraints.gridx = 0;

    gridBagConstraints.gridy = 2;

    gridBagConstraints.gridwidth = 3;

    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;

    gridBagConstraints.weightx = 1.0;

    gridBagConstraints.weighty = 1.0;

    add(previewPane, gridBagConstraints);



    stylesBox.addItemListener(new java.awt.event.ItemListener() {

      public void itemStateChanged(java.awt.event.ItemEvent evt) {

        stylesBoxItemStateChanged(evt);

      }

    });



    gridBagConstraints = new java.awt.GridBagConstraints();

    gridBagConstraints.gridx = 2;

    gridBagConstraints.gridy = 1;

    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;

    add(stylesBox, gridBagConstraints);



  }//GEN-END:initComponents

  private void stylesBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_stylesBoxItemStateChanged
      if (evt.getStateChange() == ItemEvent.SELECTED) {
          setSelectedFont(selectedFont.deriveFont(((FontStyle) evt.getItem()).getStyle()));
      }
  }//GEN-LAST:event_stylesBoxItemStateChanged

  private void sizesBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sizesBoxItemStateChanged
      if (evt.getStateChange() == ItemEvent.SELECTED) {
          setSelectedFont(selectedFont.deriveFont(((Integer) evt.getItem()).floatValue()));
      }
  }//GEN-LAST:event_sizesBoxItemStateChanged

  private void fontsBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fontsBoxItemStateChanged
      if (evt.getStateChange() == ItemEvent.SELECTED) {
          setSelectedFont(new Font((String) evt.getItem(), selectedFont.getStyle(), selectedFont.getSize()));
      }
  }//GEN-LAST:event_fontsBoxItemStateChanged

    /** Getter for property font.
     * @return Value of property font.
     *
     */
    public Font getSelectedFont() {
        return this.selectedFont;
    }

    /** Setter for property selectedFont.
     * @param selectedFont New value of property selectedFont.
     *
     */
    private void setSelectedFont(Font selectedFont) {
        this.selectedFont = selectedFont;
        previewLabel.setFont(selectedFont);
    }

    public Option showDialog(Component parent) {
        if (chooserDialog == null) {
            chooserDialog = new FontChooserDialog(parent);
        }
        return chooserDialog.showUp();
    }
  // Variables declaration - do not modify//GEN-BEGIN:variables

  private javax.swing.JLabel sizesLabel;

  private javax.swing.JLabel previewLabel;

  private javax.swing.JComboBox sizesBox;

  private javax.swing.JComboBox fontsBox;

  private javax.swing.JLabel fontsLabel;

  private org.softsmithy.lib.swing.JTypesafeEnumComboBox stylesBox;

  private javax.swing.JPanel previewPane;

  private javax.swing.JLabel stylesLabel;

  // End of variables declaration//GEN-END:variables
    /** Holds value of property selectedFont. */
    private Font selectedFont;

    //  private class FontPreviewPanel extends JPanel {
    //
    ////    private Font thisFont;
    //    private String previewText;
    //
    //    public FontPreviewPanel(ResourceBundle rb){
    ////      thisFont = new Font("Arial", Font.PLAIN, 10);
    //      previewText = rb.getString("previewText");
    //    }
    //
    //    // Resets thisFont to the currently selected fontname, size and style attributes.
    ////    public void changeFont(String f, int st, String si){
    ////      Integer newSize = new Integer(si);
    ////      int size = newSize.intValue();
    ////      thisFont = new Font(f, st, size);
    ////      repaint();
    ////    }
    //
    //    public void paintComponent(Graphics g) {
    //      super.paintComponent( g );
    //      Graphics2D g2 = (Graphics2D) g;
    //      int w = getWidth();
    //      int h = getHeight();
    //
    //      g2.setColor(Color.darkGray);
    //      g2.setFont(thisFont);
    //      FontMetrics metrics = g2.getFontMetrics();
    //      int width = metrics.stringWidth( previewText );
    //      int height = metrics.getHeight();
    //      g2.drawString( previewText, w/2-width/2, h/2-height/2 );
    //    }
    //  }
    /**
     * TODO: Switch to enum type in v1.4
     */
    public abstract static class FontStyle extends TypesafeEnum {

        private static final String BASE_NAME = "org.softsmithy.lib.swing.JFontChooser$FontStyle";

        private FontStyle(String name) {
            super(name);
        }

        @Override
        public String getResourceBundleBaseName() {
            return BASE_NAME;
        }

        public abstract int getStyle();
        public static final FontStyle PLAIN = new FontStyle("plain") {

            @Override
            public int getStyle() {
                return Font.PLAIN;
            }
        };
        public static final FontStyle ITALIC = new FontStyle("italic") {

            @Override
            public int getStyle() {
                return Font.ITALIC;
            }
        };
        public static final FontStyle BOLD = new FontStyle("bold") {

            @Override
            public int getStyle() {
                return Font.BOLD;
            }
        };
        public static final FontStyle BOLD_AND_ITALIC = new FontStyle("boldAndItalic") {

            @Override
            public int getStyle() {
                return Font.BOLD | Font.ITALIC;
            }
        };
        private static final FontStyle[] PRIVATE_VALUES = {PLAIN, BOLD, ITALIC, BOLD_AND_ITALIC};
        public static final List<FontStyle> VALUES = Collections.unmodifiableList(Arrays.asList(PRIVATE_VALUES));
        private static final Map<Integer, FontStyle> fontStyles = new HashMap<Integer, FontStyle>();


        static {
            for (int i = 0; i < PRIVATE_VALUES.length; i++) {
                fontStyles.put(PRIVATE_VALUES[i].getStyle(), PRIVATE_VALUES[i]);
            }
        }

        public static FontStyle getFontStyle(int fontStyle) {
            return fontStyles.get(fontStyle);
        }
    }

    public class FontChooserDialog extends JChooser {

        private Font initialFont;

        public FontChooserDialog(Component parent) {
            super(parent, rb.getString("title"), JFontChooser.this);
            try {
                JButton okButton = XActions.createButton(XActions.createXAction("ok", this, rb), IconType.NO_ICON, true, false);
                JButton cancelButton = XActions.createButton(XActions.createXAction("cancel", this, rb), IconType.NO_ICON, true, false);
                JButton resetButton = XActions.createButton(XActions.createXAction("reset", this, rb), IconType.NO_ICON, true, false);
                setButtons(new JButton[]{okButton, cancelButton, resetButton}, okButton);
            } catch (NoSuchMethodException ex) {
                LOG.error(ex.getMessage(), ex);
            }
        }

        public void ok(ActionEvent e) {
            hide();
            setOption(Option.APPROVE);
        }

        public void cancel(ActionEvent e) {
            hide();
            setOption(Option.CANCEL);
        }

        public void reset(ActionEvent e) {
            selectFont(initialFont);
        }

        @Override
        public Option showUp() {
            initialFont = JFontChooser.this.getFont();
            return super.showUp();
        }
    }
}
